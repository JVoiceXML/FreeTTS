/**
 * Copyright 2002 DFKI GmbH.
 * All Rights Reserved.  Use is subject to license terms.
 *
 * See the file "license.terms" for information on usage and
 * redistribution of this file, and for a DISCLAIMER OF ALL
 * WARRANTIES.
 */
package de.dfki.lt.freetts.mbrola;

import com.sun.speech.freetts.UtteranceProcessor;
import com.sun.speech.freetts.Utterance;
import com.sun.speech.freetts.ProcessException;

import com.sun.speech.freetts.audio.AudioPlayer;
import com.sun.speech.freetts.audio.JavaStreamingAudioPlayer;

import javax.sound.sampled.AudioFormat;

import java.nio.ByteOrder;
import java.util.*;
import java.io.*;

/**
 * Supports generating audio output from an MBROLA-synthesised utterance. This
 * is an utterance processor. The primary method, <code> processUtterance
 * </code> takes an utterance containing an open BufferedInputStream, from
 * which to read raw audio data provided by the external MBROLA binary. The
 * audio data is read and sent to the proper audio player.
 *
 */
public class MbrolaAudioOutput implements UtteranceProcessor {
    /**
     * The raw audio data coming out of MBROLA is in native byte order,
     * 16 kHz, 16 bit, mono
     */
    private final static AudioFormat MBROLA_AUDIO =
            new AudioFormat(AudioFormat.Encoding.PCM_SIGNED,
                            16000, // samples per second
                            16, // bits per sample
                            1, // mono
                            2, // nr. of bytes per frame
                            16000, // nr. of frames per second
                            ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN);
    
    /**
     * Reads audio data generated by the external MBROLA binary for the given
     * Utterance. The data is read from the open BufferedInputStream associated
     * with the Utterance, and written into the AudioPlayer.
     *
     * @param  utterance  the utterance to generate waves
     *
     * @throws ProcessException if an IOException is thrown during the
     *         processing of the utterance
     */
    public void processUtterance(Utterance utterance) throws ProcessException {

	AudioPlayer audioPlayer = utterance.getVoice().getAudioPlayer();

	audioPlayer.setAudioFormat(MBROLA_AUDIO);
	audioPlayer.setVolume(utterance.getVoice().getVolume());

	utterance.getVoice().log("=== " +
                                 utterance.getString("input_text"));

        if (audioPlayer instanceof JavaStreamingAudioPlayer) {
            streamUtterance(utterance, (JavaStreamingAudioPlayer) audioPlayer);
        } else {
            playUtterance(utterance);
        }
    }

    
    /**
     * Streams the audio data generated by the external MBROLA binary
     * to the given JavaStreamingAudioPlayer.
     *
     * @param utterance the utterance that generate waves
     * @param streamPlayer the AudioPlayer to stream audio to
     *
     * @throws ProcessException if an IOException is thrown during
     *    the streaming
     */
    private void streamUtterance(Utterance utterance,
                                 JavaStreamingAudioPlayer streamPlayer) 
        throws ProcessException {
	
        // read from Mbrola and somehow get the audio data into sound output.

        BufferedInputStream fromMbrola =
            (BufferedInputStream) utterance.getObject("fromMbrola");
  
        if (fromMbrola == null) {
            throw new ProcessException
                ("No \"fromMbrola\" object is associated with utterance");
        }

        byte[] buffer = new byte[1024];

        streamPlayer.begin(0);

        try {
            int nrRead = -1; // -1 means end of file
            while ((nrRead = fromMbrola.read(buffer)) != -1) {
                if (!streamPlayer.write(buffer, 0, nrRead)) {
                    // drain the input stream
                    while ((nrRead = fromMbrola.read(buffer)) != -1) {}
                    fromMbrola.close();
                    streamPlayer.end();
                    throw new ProcessException
                        ("Cannot write audio data to Player");
                }
            }
            fromMbrola.close();
        } catch (IOException e) {
            throw new ProcessException("Cannot read from mbrola");
        }

        if (!streamPlayer.end()) {
            throw new ProcessException("audio player reports problem");
        }
    }


    /**
     * Plays the audio data generated by the external MBROLA binary
     * to the given AudioPlayer
     *
     * @param utterance the utterance that generate waves
     *
     * @throws ProcessException if an IOException occurs
     */
    private void playUtterance(Utterance utterance) throws ProcessException {

        AudioPlayer audioPlayer = utterance.getVoice().getAudioPlayer();

        // read from Mbrola and somehow get the audio data into sound output.

        BufferedInputStream fromMbrola =
            (BufferedInputStream) utterance.getObject("fromMbrola");
        if (fromMbrola == null) {
            throw new ProcessException
                ("No \"fromMbrola\" object is associated with utterance");
        }

        // The AudioPlayer interface currently does not allow streaming audio.
        // We need to know the total number of samples that will be written
        // before we can start writing them. Therefore, we need to load all
        // audio data for this utterance into RAM.
        
        byte[] buf = new byte[1024];
        
        // In order to avoid resizing a large array, we save the audio data
        // in the chunks in which we read it.

        ArrayList audioData = new ArrayList();
        int totalSize = 0;
        int nrRead = -1; // -1 means end of file
        try{
            while ((nrRead = fromMbrola.read(buf)) != -1) {
                byte[] slice = new byte[nrRead];
                System.arraycopy(buf, 0, slice, 0, nrRead);
                audioData.add(slice);
                totalSize += nrRead;
            }
            fromMbrola.close();
        } catch (IOException e) {
            throw new ProcessException("Cannot read from mbrola");
        }
        audioPlayer.begin(totalSize);
        for (Iterator it = audioData.iterator(); it.hasNext();) {
            byte[] bytes = (byte[]) it.next();
            if (!audioPlayer.write(bytes)) {
                throw new ProcessException
                    ("Cannot write audio data to audio player");
            }
        }
        boolean ok = audioPlayer.end();
        if (!ok) {
            throw new ProcessException("audio player reports problem");
        }
    }


    
    /**
     * 
     * Returns the string form of this object
     * 
     * @return the string form of this object
     */
    public String toString() {
	return "MbrolaAudioOutput";
    }
}




