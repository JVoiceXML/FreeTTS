Copyright 2001 Sun Microsystems, Inc.

See the file "license.terms" for information on usage and redistribution of
this file, and for a DISCLAIMER OF ALL WARRANTIES.

This directory contains the necessary files for converting FestVox voices
for FreeTTS.


--------- Creating a Voice ---------

The voices must first be created by FestVox.  Please refer to the
FestVox documentation for full information.  (http://festvox.org,
http://festvox.org/bsv/) Section IV.19 provides a good tutorial on
making a US Diphone voice, and Section II.5.6 provides a good tutorial
on recording a cluster unit voice for the limited domain of telling
the time.  Section II.5 provides a good general explaination of
creating a limited domain voice in general.  If you want to experiment
with voice creation and conversion, creating a time telling voice is a
good place to begin.

In our experience, FestVox and Festival work better under Linux x86
platforms.


--------- Importing a FestVox Voice into FreeTTS (quick explaination) ---------

* Make sure festival, java, and javac are in your path.
* Define the ESTDIR environment variable.
* Execute <FreeTTSdir>/tools/FestVoxToFreeTTS/FestVoxToFreeTTS.sh <voicedir>
   * Follow the prompts asking you about the voice's properties.
* Test it with <FreeTTSdir>/bin/freetts -voice <voicename>

You have now imported a voice into FreeTTS.

See "FestVoxToFreeTTS.sh --help" for more information.

--------- Importing a FestVox Voice into FreeTTS (full explaination) ---------

FreeTTS follow many of the same steps that Flite
(http://www.speech.cs.cmu.edu/flite) does for importing voices.  For a
more detailed description of the process, please read Section 8 of the
Flite documentation
(http://www.speech.cs.cmu.edu/flite/doc/index.html).

To import a voice into FreeTTS, you first need to do the following things:
1. Compile Festival (http://festvox.org/) as well as the speech tools that
    come with Festival.  Refer to the Festival documentation for details
    of setting this up on your system.
2. You must have Java and a Java Compiler installed on your system.
    See http://java.sun.com if you do not already have this.
    Java version 1.4.2 is known to work.
3. "festival", "java", and "javac" must be in your path.  For example, I used
    the following command under bash (modify appropriately):
    "export PATH=$PATH:/usr/java/j2sdk1.4.2/bin:\
     /home/dv144877/festival/bin/"
4. You must set the ESTDIR environment variable to point to the speech tools.
    e.g. "export ESTDIR=/home/dv144877/speech_tools"

To convert a voice, run:
FestVoxToFreeTTS.sh <voicedir>
where <voicedir> is the directory the FestVox voice resides in.  The
contents of <voicedir> will looks something like:
bin/  etc/       FreeTTS/  lpc/     prompt-cep/  recording/  wav/
cep/  f0/        group/    mcep/    prompt-lab/  scratch/    wavn/
dic/  festival/  lab/      pm/      prompt-utt/  sts/        wrd/
emu/  festvox/   lar/      pm_lab/  prompt-wav/  versions/

The script will automatically detect whether it is a cluster unit
voice or a diphone voice by looking at the <voicedir>/etc/voice.defs
file.  If no such file exists, you will need to create it.  An example
for a time-telling voice would be something like:
FV_INST=sun
FV_LANG=time
FV_NAME=dtv
FV_TYPE=ldom
FV_VOICENAME=$FV_INST"_"$FV_LANG"_"$FV_NAME
FV_FULLVOICENAME=$FV_VOICENAME"_"$FV_TYPE

If possible, you can let festival automatically generate this for you.
Try <festvoxdir>/src/general/guess_voice_defs

FreeTTS will create a new directory <voicedir>/FreeTTS/   In that
directory is the text which contains all the data for the voice (along
with a few other intermediate files).  The voice file will have a name
like sun_time_dtv.txt

The various stages of the conversion process can be called directly by
passing a second argument to FestVoxToFreeTTS.sh such as "sts" or
"mcep".  These should be used carefully.  More information on these
stages can be found in the Flite documentation.  The order is "lpc",
"sts", "mcep" (if a cluster unit voice), "idx", "install", "compile".
The "install" and "compile" are specific to FreeTTS and are not
mentioned in the Flite documentation.  They are the stages that
construct the framework for the voice within freetts and compile the
result.

When the process gets to the install phase, you will encounter a menu.
The install phase only knows how to handle US English voices.  If you
have any other languages/locales, then you should probably exit at
this step.  Unfortunately adding new languages or locales is beyond
the scope of this document.

Voice Properties:
 Name - The name you want to call this voice.  For example "kevin",
     "kevin16", "alan", or "dave".
 Gender - The gender of the voice.
 Age - The age of the voice.
 Description - A sentence or so that describes this voice for others.
 Full Name - This is the name that will be used to name the voice
     files and directory.  It must be unique to this installation
     of FreeTTS as well as any other copy of FreeTTS you expect to use
     this voice.  For the sake of similarity to other voices, it is
     highly recommended to not change this property unless it
     conflicts with an existing voice.  The format for the name
     follows the convention <domain>_<locale>_<name>  The <name>
     does not have to match the Name property.  The domain generally
     matches an Internet domain or some other globally unique
     identity.  For limited domain voices, you can put the limited
     domain down instead of locale.For example, cmu_us_kal,
     cmu_time_awb, sun_us_dtv.

If there already exists a voice with the same Full Name, you are given
the option to over-write it, cancel, or change the properties.

When this is done, the voice is put into the FreeTTS directory
structure <FreeTTSdir>/com/sun/speech/freetts/en/us/<voice Full Name>
It is recommended to visit this directory and confirm that everything
looks correct.  If this is a limited domain voice for something other
than the cmu time domain, then you will likely have to make some
changes to make it look at the correct lexicon.

The compiled voice is put in <FreeTTSdir>/lib/<voice Full Name>.jar

The voice will automatically be added to the list of available voices
for FreeTTS.  This list is stored in <FreeTTS/lib/voices.txt>.

You can now test your voice with:
"<FreeTTSdir>/bin/freetts -voice <name>" where <name> the name
property you assigned it in the "install" phase.
(The bin/freetts script automatically detects your new voice and adds
it to your java classpath, so you don't have to worry about that).

If your voice is a time limited domain voice, you can do:
"<FreeTTSdir>/bin/jtime -voice <name>"

[[[TODO: dynamic detection of jar files]]]


--------- Files in this directory ---------

FestVoxToFreeTTS.sh:  The bash script that performs the conversion process.
FestVoxClunitsToFreeTTS.scm: Perform the idx stage of the conversion for
            cluster unit voices.
FestVoxDiphoneToFreeTTS.scm: Perform the idx stage of the conversion for
            diphone voices.
qsort.scm: A simple quicksort implementation in scheme.
FindSTS.java: Generate the sts file for a given recording.  Used by
    FestVoxToFreeTTS.sh
FindSTS.jar: A compiled version of FindSTS.java (automatically generated)
README: This file.
CMU_USDiphoneTemplate.java: A template voice directory for en/us
    diphone voices.
CMU_USTimeTemplate.java: A template voice directory for en/us time
    limited domain cluster unit voices.
VoiceMakefileTemplate.txt: A template Makefile for both ldom and
    diphone voices.
